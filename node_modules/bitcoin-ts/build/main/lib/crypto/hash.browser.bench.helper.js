"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-expression-statement no-unsafe-any
const asmCrypto = __importStar(require("asmcrypto.js"));
const chuhai_1 = __importDefault(require("chuhai"));
const hashJs = __importStar(require("hash.js"));
const crypto_1 = require("./crypto");
// tslint:disable-next-line:no-any
const isUint8Array = (array) => array && array.constructor.name === 'Uint8Array';
const compare = (a, b) => {
    // tslint:disable-next-line:no-if-statement
    if (!isUint8Array(a) ||
        !isUint8Array(b) ||
        a.toString() !== b.toString()) {
        benchError(`
  Invalid result: ${a} is not equal to ${b}
  `);
    }
};
const randomBytes = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
const singlePassBrowserBenchmark = async (hashFunction, hashFunctionName, inputLength, subtleCryptoAlgorithmName) => chuhai_1.default(`browser: ${hashFunctionName}: hash a ${inputLength}-byte input`, s => {
    // tslint:disable:no-let prefer-const
    let message = randomBytes(inputLength);
    let hash;
    s.cycle(() => {
        // tslint:disable-next-line:no-if-statement strict-boolean-expressions
        if (hash) {
            compare(hash, hashFunction.hash(message));
        }
        else {
            benchError(`asmcrypto.js produced a null result given message: ${message}`);
        }
        message = randomBytes(inputLength);
    });
    s.bench('bitcoin-ts', () => {
        hash = hashFunction.hash(message);
    });
    s.bench('hash.js', () => {
        hash = new Uint8Array(hashJs[hashFunctionName]()
            .update(message)
            .digest());
    });
    // tslint:disable-next-line:no-if-statement
    if (subtleCryptoAlgorithmName) {
        s.bench('crypto.subtle', deferred => {
            window.crypto.subtle
                .digest(subtleCryptoAlgorithmName, message)
                .then(buffer => {
                hash = new Uint8Array(buffer);
                deferred.resolve();
            });
        }, {
            defer: true
        });
        const algorithm = subtleCryptoAlgorithmName === 'SHA-1'
            ? asmCrypto.Sha1
            : subtleCryptoAlgorithmName === 'SHA-256'
                ? asmCrypto.Sha256
                : asmCrypto.Sha512;
        s.bench('asmcrypto.js', () => {
            const instance = new algorithm();
            hash = instance.process(message).finish().result;
        });
    }
});
const MB = 1000000;
const incrementalBrowserBenchmark = async (hashFunction, hashFunctionName, totalInput, chunkSize) => chuhai_1.default(`browser: ${hashFunctionName}: incrementally hash a ${totalInput /
    MB}MB input in ${chunkSize / MB}MB chunks`, s => {
    let message;
    let messageChunks;
    let hash;
    const nextCycle = () => {
        /**
         * We can't get this much entropy, so we just use 0s here.
         */
        message = new Uint8Array(totalInput).fill(0);
        const chunkCount = Math.ceil(message.length / chunkSize);
        messageChunks = Array.from({ length: chunkCount }).map((_, index) => message.slice(index * chunkSize, index * chunkSize + chunkSize));
    };
    nextCycle();
    s.cycle(() => {
        // tslint:disable-next-line:no-if-statement strict-boolean-expressions
        if (hash) {
            compare(new Uint8Array(hash), hashFunction.hash(message));
        }
        else {
            benchError(`asmcrypto.js produced a null result given message: ${message}`);
        }
        nextCycle();
    });
    s.bench('bitcoin-ts', () => {
        hash = hashFunction.final(messageChunks.reduce((state, chunk) => hashFunction.update(state, chunk), hashFunction.init()));
    });
    s.bench('hash.js', () => {
        hash = messageChunks
            .reduce((state, chunk) => state.update(chunk), hashJs[hashFunctionName]())
            .digest();
    });
    // tslint:disable-next-line:no-if-statement
    if (hashFunctionName !== 'ripemd160') {
        const algorithm = hashFunctionName === 'sha1'
            ? asmCrypto.Sha1
            : hashFunctionName === 'sha256'
                ? asmCrypto.Sha256
                : asmCrypto.Sha512;
        s.bench('asmcrypto.js', () => {
            const instance = new algorithm();
            hash = instance.process(message).finish().result;
        });
    }
});
const browserBenchmarks = async (func, name, subtle) => {
    // tslint:disable:no-magic-numbers
    await singlePassBrowserBenchmark(func, name, 32, subtle);
    await singlePassBrowserBenchmark(func, name, 100, subtle);
    await singlePassBrowserBenchmark(func, name, 1000, subtle);
    await singlePassBrowserBenchmark(func, name, 10000, subtle);
    await incrementalBrowserBenchmark(func, name, MB * 32, MB);
};
(async () => {
    const sha1 = await crypto_1.instantiateSha1();
    const sha256 = await crypto_1.instantiateSha256();
    const sha512 = await crypto_1.instantiateSha512();
    const ripemd160 = await crypto_1.instantiateRipemd160();
    await browserBenchmarks(sha1, 'sha1', 'SHA-1');
    await browserBenchmarks(sha256, 'sha256', 'SHA-256');
    await browserBenchmarks(sha512, 'sha512', 'SHA-512');
    await browserBenchmarks(ripemd160, 'ripemd160');
    benchComplete();
})().catch(err => {
    // tslint:disable-next-line:no-console
    console.error(err);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC5icm93c2VyLmJlbmNoLmhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY3J5cHRvL2hhc2guYnJvd3Nlci5iZW5jaC5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsdURBQXVEO0FBQ3ZELHdEQUEwQztBQUMxQyxvREFBMkI7QUFDM0IsZ0RBQWtDO0FBRWxDLHFDQUtrQjtBQUtsQixrQ0FBa0M7QUFDbEMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUNsQyxLQUFLLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDO0FBRW5ELE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBYyxFQUFFLENBQWMsRUFBRSxFQUFFO0lBQ2pELDJDQUEyQztJQUMzQyxJQUNFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNoQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDZixDQUFnQixDQUFDLFFBQVEsRUFBRSxLQUFNLENBQWdCLENBQUMsUUFBUSxFQUFFLEVBQzdEO1FBQ0EsVUFBVSxDQUFDO29CQUNLLENBQUMsb0JBQW9CLENBQUM7R0FDdkMsQ0FBQyxDQUFDO0tBQ0Y7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQ3BDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUVoRCxNQUFNLDBCQUEwQixHQUFHLEtBQUssRUFDdEMsWUFBMEIsRUFDMUIsZ0JBQTRELEVBQzVELFdBQW1CLEVBQ25CLHlCQUEyRCxFQUMzRCxFQUFFLENBQ0YsZ0JBQUssQ0FBQyxZQUFZLGdCQUFnQixZQUFZLFdBQVcsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQzFFLHFDQUFxQztJQUNyQyxJQUFJLE9BQU8sR0FBRyxXQUFX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