// shamir secret sharing scheme
const sss = require('secrets.js-grempe');


//const Block = require('./Block.js');
const Transaction = require('./Transaction.js');
const Blockchain = require('./Blockchain.js');
const Block = require('./Block.js');
const Wallet = require('./Wallet.js');

// This uses the elliptic curve cryptography technique
const EC = require('elliptic').ec;
const ec = new EC('secp256k1');


//const myKey = ec.keyFromPrivate('78aa3258b14c4ef7d4790e601040065d6844899a88eb635327c3b73fea9c3934');
//const myWalletAddress = myKey.getPublic('hex');
//console.log(myKey, "--------------------------------------------------------");

var main = function() { 

	const Coin = new Blockchain("as");
	//let block = new Block();	
	const wallet = new Wallet();
	//console.log(Coin.chain[0]);



	// te has confundido porque la salida de la funcion de wallets es en una sola variable y no en dos como
	// en cons myKey y myWalletAddress, por lo que evalua la comparacion de dos variables como si fuera una 
	// sola en Transactions.js. 



	// shares
	//var key = 'Hola1234';
	//var key2hex = sss.str2hex(key);
	//var shares = [223, 342, 34];
	//var shares = sss.share(key2hex, 10, 5);
	wallet.generatePrivateKey();

	const myKey = wallet.getECDSAKeyFromPrivate();
	const myWalletAddress = wallet.generatePublicKey();
	console.log(myKey.toString('hex'), "My Private Key");
	console.log(myWalletAddress, "My Wallet Address");

	console.log('Starting the miner...');
	Coin.minePendingTransactions(myWalletAddress);

	console.log(myKey);

	//console.log(shares);
    const tx1 = new Transaction(Date.now(), myWalletAddress, 'PublicAddressOne', 100, null);
 	tx1.signTransaction(myKey);

 	Coin.addTransaction(tx1);



	console.log('Starting the miner...');
	Coin.minePendingTransactions(myWalletAddress);

	console.log('Balance of my wallet is: ', Coin.getAddressBalance(myWalletAddress));


	console.log('Starting the miner second time...');
	Coin.minePendingTransactions(myWalletAddress);
	Coin.addTransaction(tx1);
	console.log('Balance of my wallet is: ', Coin.getAddressBalance(myWalletAddress));
	console.log(Coin.getBlocks());
	console.log(Coin.difficulty);
}


if (require.main === module) {
	main();
}




















































































// old tests code (inside main)
/*
	//console.log("Mining block 1...");
	//Coin.addBlock(new Block("01/11/2014", { ammount: 4 }));

	//console.log("Mining block 2...");
	//Coin.addBlock(new Block("03/12/2015", { ammount: 5 }));

	// uncomment this lines for output the Json format of the blocks
	// console.log(JSON.stringify(Coin, null, 4));
	// console.log(JSON.stringify(Coin, null, 4));

	Coin.createTransaction(new Transaction(Date.now(), 'elena', 'diego', 300));
	Coin.createTransaction(new Transaction(Date.now(), 'diego', 'elena', 50));
	Coin.createTransaction(new Transaction(Date.now(), 'dieego', 'eqlena', 520));
	console.log('balance of AddressWinner:', Coin.getAddressBalance('AddressWinner'));
	
	console.log(Coin.returnPendingTransactions());
	console.log('\n Starting miner...');
	Coin.minePendingTransactions('AddressWinner');	

	console.log('\n Checking account balance');
	console.log('balance of Elena:', Coin.getAddressBalance('elena'));
	console.log('balance of Diego:', Coin.getAddressBalance('dieego'));
	console.log('balance of AddressWinner:', Coin.getAddressBalance('AddressWinner'));

	//Coin.createTransaction(new Transaction('Elena', 'Diego', 360));
	//Coin.createTransaction(new Transaction('Diego', 'Elena', 80));


	//console.log('\n Checking account balance');
	//console.log('balance of Elena:', Coin.getAddressBalance('Elena'));
	//console.log('balance of Diego:', Coin.getAddressBalance('Diego'));


	console.log('\n Starting miner again...');
	Coin.minePendingTransactions('AddressWinner');	

	console.log(Coin.returnPendingTransactions());
	console.log('\n Checking account balance');
	console.log('balance of Elena:', Coin.getAddressBalance('elena'));
	console.log('balance of Diego:', Coin.getAddressBalance('dieego'));
	console.log('balance of AddressWinner:', Coin.getAddressBalance('AddressWinner'));
	
	console.log(Coin.returnPendingTransactions());
	console.log('\n Starting miner again...');
	Coin.minePendingTransactions('AddressWinner');	


	console.log('\n Checking account balance');
	console.log('balance of Elena:', Coin.getAddressBalance('elena'));
	console.log('balance of Diego:', Coin.getAddressBalance('dieego'));
	console.log('balance of AddressWinner:', Coin.getAddressBalance('AddressWinner'));


	console.log(Coin.returnPendingTransactions());
//	console.log('\n Checking account balance');
//	console.log('balance of Address-Winner:', Coin.getAddressBalance('AddressWinner'));

//	console.log('\n Starting miner...');
//	Coin.minePendingTransactions('AddressWinner');	
*/ 