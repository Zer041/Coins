const Transaction = require('./Transaction.js');

// crypto-js
const SHA256 = require('crypto-js/sha256');
const SHA3 = require('crypto-js/sha3');
const RIPEMD160 = require('crypto-js/ripemd160');





class Block {
	constructor (timestamp, transactions, previousHash = '') {
		// we're gonna omit the index property because its not practical
		// where the block sits on the chain:
		// this.index = index;						
		this.timestamp = timestamp;				// the date of the transference
		this.transactions = transactions;						// data transference 
		this.previousHash = previousHash;		// string that contains previousHash of the transference
		this.sero = 0;


		// calculates de hash of above declarations
		this.hash = this.calculateHash();
	}



	// Do the SHA257 + SHA3 1 times of constructor declarations, its not efficient because Sha3 its "possibly relationed" with NSA too soooo... 
	calculateHash() {
		// SHA3(SHA256(constructor declarations + variable sero explained in mineBlock function))
	   	// return SHA3(SHA256(this.timestamp + this.previousHash + JSON.stringify(this.transactions) + this.sero).toString()).toString();


		// this is actually a combination of RIPEMD160 and SHA256
		return RIPEMD160(SHA256(this.timestamp + this.previousHash + JSON.stringify(this.transactions) + this.sero).toString()).toString();

	}


	// Actually what we're doing here is setting a difficulty level, in Bitcoin the blocks starts with a lot of 0's
	// this consist in picking the substring from 0 to difficulty and compare it to an array of the difficulty variable + 1 and joining 0 at the end
	// if the condition its not true variable sero keeps incrementing, variable sero is inside of calculateHash function, so the thing
	// keeps going on until calculateHash(index + tiemstamp + previousHash + data + sero) the first numbers from 0 to difficulty equals 0
	// if it equals 0 the range from 0 to difficulty the while loop its done and the console log message shows

	mineBlock(difficulty) {
		while(this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0")) {
			this.sero++;
			this.hash = this.calculateHash();

		}
		console.log("Block mined: " + this.hash);
	}


	// we want to make a function that verifies the transactions of the current block so we will iterate for every element of the block verifying it
	hasValidTransactions() {
		for(const tx of this.transactions) {
			if(!tx.isValid()) {
				return !true;
			}
		}

		return true;
	}
}


module.exports = Block;