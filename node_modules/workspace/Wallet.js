const secureRandom = require('secure-random');
const ec = require('elliptic').ec;
const ecdsa = new ec('secp256k1');

//const SHA256 = require('crypto-js/sha256');

const SHA3 = require('crypto-js/sha3');
//const RIPEMD160 = require('crypto-js/ripemd160');
const RIPEMD160 = require('ripemd160');
const SHA256 = require('js-sha256');
const BASE58 = require('bs58');



class Wallet {

	constructor() {

		const x = Buffer.from("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140", 'hex'); 
		var output = this.generatePrivateKey();
		//var test = this.generatePublicKeys();
		this.walletData = [];
		this.max = x;
		this.privateKey = output;
		this.publicKeys = this.walletData[2];
		this.isKeyValid = true;
		this.bytes = 32;

	}


	generatePrivateKey() {
		while(this.isKeyValid) {
			var privateKey = secureRandom.randomBuffer(this.bytes);
			//console.log(privateKey);
			if (Buffer.compare(this.max, privateKey) === 1) {
				this.isKeyValid = false;
				this.privateKey = privateKey;
				this.walletData.push(privateKey.toString('hex'));
			}
			return privateKey;
		}
	}

	getECDSAKeyFromPrivate() {
		let k = ecdsa.keyFromPrivate(this.privateKey);
		return ecdsa.keyFromPrivate(this.privateKey);;
	}


	generatePublicKey() {
		//this.privKey = this.privateKey;
		const ks = ecdsa.keyFromPrivate(this.privateKey);
		var publicKeys = ks.getPublic('hex');

		//this.publicKeys = publicKeys;
		this.walletData.push(publicKeys);
		return publicKeys;
	}


	generatePublicKeyHash() {
		this.generatePrivateKey();
		this.generatePublicKey();
		//console.log(this.walletData[1]);
		
		let hash = SHA256(Buffer.from(this.walletData[1], 'hex'));
		let publicKeyHash = new RIPEMD160().update(Buffer.from(hash, 'hex')).digest();
		this.walletData.push(publicKeyHash.toString('hex'));
		return publicKeyHash.toString('hex');
	}
	

	generatePublicKeyAddress(publicKeyHash) {
		this.publicKeyHash = this.generatePublicKeyHash();
		// add 00 to the prefix
		const step1 = Buffer.from("00" + this.publicKeyHash, 'hex');
		console.log("THIS IS PLUS 00: ", step1);
  		// step 2 - create SHA256 hash of step 1
  		const step2 = SHA256(step1);
  		// step 3 - create SHA256 hash of step 2
  		const step3 = SHA256(Buffer.from(step2, 'hex'));
	  	// step 4 - find the 1st byte of step 3 - save as "checksum"

	  	const checksum = step3.substring(0, 8);
  		console.log("THIS IS YOUR CHECKSUM: ", checksum);
  		// step 5 - add step 1 + checksum
  		const step4 = step1.toString('hex') + checksum;
  		// return base 58 encoding of step 5
  		const address = BASE58.encode(Buffer.from(step4, 'hex'));
  		
  		return address;
		}
}


module.exports = Wallet;

// in walletData array 1st its the private ECDSA, second its the public from the private, third is the public key Hash used 
// for generating the public key address

// console.log(hay.walletData);

